{"ast":null,"code":"// Enhanced routine generation system with AI integration\nimport { generateAIRoutine, loadExerciseVideos } from './services/api';\nexport const BODY_PARTS = {\n  NECK: 'neck',\n  SHOULDERS: 'shoulders',\n  UPPER_BACK: 'upper_back',\n  LOWER_BACK: 'lower_back',\n  CHEST: 'chest',\n  ARMS: 'arms',\n  HIPS: 'hips',\n  LEGS: 'legs',\n  CALVES: 'calves',\n  FULL_BODY: 'full_body'\n};\nexport const GOALS = {\n  MORNING_WAKE_UP: 'morning_wake_up',\n  PRE_WORKOUT: 'pre_workout',\n  POST_WORKOUT: 'post_workout',\n  DESK_BREAK: 'desk_break',\n  STRESS_RELIEF: 'stress_relief',\n  BEDTIME_RELAX: 'bedtime_relax',\n  PAIN_RELIEF: 'pain_relief',\n  FLEXIBILITY: 'flexibility'\n};\nexport const DIFFICULTY_LEVELS = {\n  BEGINNER: 'beginner',\n  INTERMEDIATE: 'intermediate',\n  ADVANCED: 'advanced'\n};\n\n// Fallback exercises for when AI is unavailable\nconst FALLBACK_EXERCISES = {\n  neck_roll: {\n    name: 'Neck Rolls',\n    duration: 30,\n    description: 'Gently roll your neck in circles',\n    bodyParts: ['neck'],\n    goals: ['desk_break', 'stress_relief'],\n    equipment: ['none']\n  },\n  shoulder_shrug: {\n    name: 'Shoulder Shrugs',\n    duration: 30,\n    description: 'Lift shoulders up to ears and release',\n    bodyParts: ['shoulders'],\n    goals: ['desk_break', 'stress_relief'],\n    equipment: ['none']\n  },\n  arm_circles: {\n    name: 'Arm Circles',\n    duration: 40,\n    description: 'Make circles with your arms',\n    bodyParts: ['shoulders', 'arms'],\n    goals: ['morning_wake_up', 'pre_workout'],\n    equipment: ['none']\n  },\n  cat_cow: {\n    name: 'Cat-Cow Stretch',\n    duration: 45,\n    description: 'Arch and round your back',\n    bodyParts: ['upper_back', 'lower_back'],\n    goals: ['morning_wake_up', 'flexibility'],\n    equipment: ['mat']\n  },\n  forward_fold: {\n    name: 'Forward Fold',\n    duration: 45,\n    description: 'Bend forward to touch toes',\n    bodyParts: ['lower_back', 'legs'],\n    goals: ['flexibility', 'bedtime_relax'],\n    equipment: ['none']\n  },\n  chest_opener: {\n    name: 'Chest Opener',\n    duration: 30,\n    description: 'Clasp hands behind back and lift',\n    bodyParts: ['chest', 'shoulders'],\n    goals: ['desk_break', 'post_workout'],\n    equipment: ['none']\n  },\n  hip_circles: {\n    name: 'Hip Circles',\n    duration: 40,\n    description: 'Circle hips in both directions',\n    bodyParts: ['hips'],\n    goals: ['pre_workout', 'flexibility'],\n    equipment: ['none']\n  },\n  quad_stretch: {\n    name: 'Standing Quad Stretch',\n    duration: 60,\n    description: 'Hold foot behind you, 30s each leg',\n    bodyParts: ['legs'],\n    goals: ['pre_workout', 'post_workout'],\n    equipment: ['wall']\n  },\n  calf_stretch: {\n    name: 'Calf Stretch',\n    duration: 60,\n    description: 'Push against wall, 30s each leg',\n    bodyParts: ['calves'],\n    goals: ['pre_workout', 'post_workout'],\n    equipment: ['wall']\n  },\n  foam_roll_back: {\n    name: 'Foam Roll Upper Back',\n    duration: 60,\n    description: 'Roll slowly from mid to upper back',\n    bodyParts: ['upper_back'],\n    goals: ['post_workout', 'pain_relief'],\n    equipment: ['foam_roller']\n  },\n  lacrosse_shoulders: {\n    name: 'Lacrosse Ball Shoulder Release',\n    duration: 60,\n    description: 'Roll ball on tight spots, 30s each side',\n    bodyParts: ['shoulders'],\n    goals: ['pain_relief', 'post_workout'],\n    equipment: ['lacrosse_ball']\n  },\n  band_chest_stretch: {\n    name: 'Band Chest Stretch',\n    duration: 45,\n    description: 'Hold band behind back, pull apart gently',\n    bodyParts: ['chest', 'shoulders'],\n    goals: ['flexibility', 'desk_break'],\n    equipment: ['resistance_band']\n  }\n};\nexport class RoutineGenerator {\n  constructor() {\n    this.fallbackExercises = FALLBACK_EXERCISES;\n    this.useAI = true; // Can be toggled for API usage\n  }\n  async generateRoutine(preferences) {\n    const {\n      equipment = ['none']\n    } = preferences;\n\n    // Ensure equipment is always an array\n    const equipmentArray = Array.isArray(equipment) ? equipment : [equipment];\n\n    // Update preferences with equipment array\n    const updatedPreferences = {\n      ...preferences,\n      equipment: equipmentArray\n    };\n    try {\n      if (this.useAI) {\n        // Try AI generation first\n        const aiRoutine = await generateAIRoutine(updatedPreferences);\n\n        // Load YouTube videos for exercises\n        const exercisesWithVideos = await loadExerciseVideos(aiRoutine.exercises);\n        return {\n          name: aiRoutine.routineName,\n          exercises: exercisesWithVideos,\n          totalDuration: exercisesWithVideos.reduce((sum, ex) => sum + ex.duration, 0),\n          difficulty: preferences.difficulty,\n          benefits: this.extractBenefits(exercisesWithVideos),\n          tips: aiRoutine.warmupTips || [],\n          cooldownAdvice: aiRoutine.cooldownAdvice\n        };\n      }\n    } catch (error) {\n      console.error('AI generation failed, using fallback:', error);\n    }\n\n    // Fallback to manual generation\n    return this.generateFallbackRoutine(updatedPreferences);\n  }\n  generateFallbackRoutine(preferences) {\n    const {\n      duration,\n      goals,\n      bodyParts,\n      equipment\n    } = preferences;\n    const targetDuration = duration || 300;\n\n    // Filter exercises based on goals, body parts, and equipment\n    let matchingExercises = Object.values(this.fallbackExercises).filter(exercise => {\n      const goalMatch = goals.some(goal => exercise.goals.includes(goal));\n      const bodyPartMatch = bodyParts.some(part => exercise.bodyParts.includes(part) || bodyParts.includes('full_body'));\n      const equipmentMatch = equipment.some(eq => exercise.equipment.includes(eq) || exercise.equipment.includes('none'));\n      return (goalMatch || bodyPartMatch) && equipmentMatch;\n    });\n\n    // If no matches, use exercises that match equipment\n    if (matchingExercises.length === 0) {\n      matchingExercises = Object.values(this.fallbackExercises).filter(exercise => equipment.some(eq => exercise.equipment.includes(eq) || exercise.equipment.includes('none')));\n    }\n\n    // Select exercises to fit duration\n    const selectedExercises = [];\n    let currentDuration = 0;\n    const usedExercises = new Set();\n    while (currentDuration < targetDuration && matchingExercises.length > 0) {\n      const availableExercises = matchingExercises.filter(ex => !usedExercises.has(ex.name));\n      if (availableExercises.length === 0) {\n        // Reset if we've used all exercises\n        usedExercises.clear();\n        continue;\n      }\n      const randomIndex = Math.floor(Math.random() * availableExercises.length);\n      const exercise = availableExercises[randomIndex];\n      if (currentDuration + exercise.duration <= targetDuration + 30) {\n        selectedExercises.push({\n          ...exercise,\n          videoSearchQuery: `${exercise.name} stretching exercise tutorial`\n        });\n        currentDuration += exercise.duration;\n        usedExercises.add(exercise.name);\n      } else {\n        // Try to find a shorter exercise\n        const shorterExercise = availableExercises.find(ex => currentDuration + ex.duration <= targetDuration && !usedExercises.has(ex.name));\n        if (shorterExercise) {\n          selectedExercises.push({\n            ...shorterExercise,\n            videoSearchQuery: `${shorterExercise.name} stretching exercise tutorial`\n          });\n          currentDuration += shorterExercise.duration;\n          usedExercises.add(shorterExercise.name);\n        } else {\n          break;\n        }\n      }\n    }\n    return {\n      name: this.generateRoutineName(goals),\n      exercises: selectedExercises,\n      totalDuration: currentDuration,\n      difficulty: preferences.difficulty || 'beginner',\n      benefits: this.extractBenefits(selectedExercises),\n      tips: this.generateTips(preferences),\n      cooldownAdvice: 'Take deep breaths and move gently back to normal activity.'\n    };\n  }\n  generateRoutineName(goals) {\n    const goalNames = {\n      morning_wake_up: 'Morning Energizer',\n      pre_workout: 'Pre-Workout Prep',\n      post_workout: 'Post-Workout Recovery',\n      desk_break: 'Desk Break Relief',\n      stress_relief: 'Stress Relief Flow',\n      bedtime_relax: 'Bedtime Wind Down',\n      pain_relief: 'Pain Relief Routine',\n      flexibility: 'Flexibility Flow'\n    };\n    return goalNames[goals[0]] || 'Custom Stretch Routine';\n  }\n  extractBenefits(exercises) {\n    const benefitsSet = new Set();\n    exercises.forEach(ex => {\n      if (ex.benefits) {\n        ex.benefits.forEach(benefit => benefitsSet.add(benefit));\n      }\n    });\n\n    // Add default benefits if none from AI\n    if (benefitsSet.size === 0) {\n      benefitsSet.add('Improved flexibility');\n      benefitsSet.add('Reduced muscle tension');\n      benefitsSet.add('Better posture');\n      benefitsSet.add('Increased blood flow');\n    }\n    return Array.from(benefitsSet).slice(0, 5);\n  }\n  generateTips(preferences) {\n    const tips = [];\n    if (preferences.timeOfDay === 'morning') {\n      tips.push('Start gently - your body may be stiff from sleep');\n    }\n    if (preferences.goals.includes('pre_workout')) {\n      tips.push('Focus on dynamic movements to warm up muscles');\n    }\n    if (preferences.goals.includes('post_workout')) {\n      tips.push('Hold stretches longer for better recovery');\n    }\n    if (preferences.difficulty === 'beginner') {\n      tips.push('Listen to your body and don\\'t push too hard');\n    }\n    tips.push('Breathe deeply throughout each stretch');\n    tips.push('Move slowly and with control');\n    return tips.slice(0, 5);\n  }\n}\n\n// Create singleton instance\nexport const routineGenerator = new RoutineGenerator();\n\n// Helper function to get YouTube embed URL\nexport const getYouTubeEmbedUrl = videoId => {\n  if (!videoId) return null;\n  return `https://www.youtube.com/embed/${videoId}?rel=0&showinfo=0&modestbranding=1`;\n};\n\n// Helper function to validate routine generation\nexport const validateRoutinePreferences = preferences => {\n  const errors = [];\n  if (!preferences.duration || preferences.duration < 60) {\n    errors.push('Duration must be at least 1 minute');\n  }\n  if (!preferences.goals || preferences.goals.length === 0) {\n    errors.push('At least one goal must be selected');\n  }\n  if (!preferences.bodyParts || preferences.bodyParts.length === 0) {\n    errors.push('At least one body part must be selected');\n  }\n  return {\n    isValid: errors.length === 0,\n    error: errors.join('. ')\n  };\n};","map":{"version":3,"names":["generateAIRoutine","loadExerciseVideos","BODY_PARTS","NECK","SHOULDERS","UPPER_BACK","LOWER_BACK","CHEST","ARMS","HIPS","LEGS","CALVES","FULL_BODY","GOALS","MORNING_WAKE_UP","PRE_WORKOUT","POST_WORKOUT","DESK_BREAK","STRESS_RELIEF","BEDTIME_RELAX","PAIN_RELIEF","FLEXIBILITY","DIFFICULTY_LEVELS","BEGINNER","INTERMEDIATE","ADVANCED","FALLBACK_EXERCISES","neck_roll","name","duration","description","bodyParts","goals","equipment","shoulder_shrug","arm_circles","cat_cow","forward_fold","chest_opener","hip_circles","quad_stretch","calf_stretch","foam_roll_back","lacrosse_shoulders","band_chest_stretch","RoutineGenerator","constructor","fallbackExercises","useAI","generateRoutine","preferences","equipmentArray","Array","isArray","updatedPreferences","aiRoutine","exercisesWithVideos","exercises","routineName","totalDuration","reduce","sum","ex","difficulty","benefits","extractBenefits","tips","warmupTips","cooldownAdvice","error","console","generateFallbackRoutine","targetDuration","matchingExercises","Object","values","filter","exercise","goalMatch","some","goal","includes","bodyPartMatch","part","equipmentMatch","eq","length","selectedExercises","currentDuration","usedExercises","Set","availableExercises","has","clear","randomIndex","Math","floor","random","push","videoSearchQuery","add","shorterExercise","find","generateRoutineName","generateTips","goalNames","morning_wake_up","pre_workout","post_workout","desk_break","stress_relief","bedtime_relax","pain_relief","flexibility","benefitsSet","forEach","benefit","size","from","slice","timeOfDay","routineGenerator","getYouTubeEmbedUrl","videoId","validateRoutinePreferences","errors","isValid","join"],"sources":["C:/Users/abami/OneDrive/Desktop/Projects/stretch app/src/routineGenerator.js"],"sourcesContent":["// Enhanced routine generation system with AI integration\nimport { generateAIRoutine, loadExerciseVideos } from './services/api';\n\nexport const BODY_PARTS = {\n  NECK: 'neck',\n  SHOULDERS: 'shoulders', \n  UPPER_BACK: 'upper_back',\n  LOWER_BACK: 'lower_back',\n  CHEST: 'chest',\n  ARMS: 'arms',\n  HIPS: 'hips',\n  LEGS: 'legs',\n  CALVES: 'calves',\n  FULL_BODY: 'full_body'\n};\n\nexport const GOALS = {\n  MORNING_WAKE_UP: 'morning_wake_up',\n  PRE_WORKOUT: 'pre_workout',\n  POST_WORKOUT: 'post_workout',\n  DESK_BREAK: 'desk_break',\n  STRESS_RELIEF: 'stress_relief',\n  BEDTIME_RELAX: 'bedtime_relax',\n  PAIN_RELIEF: 'pain_relief',\n  FLEXIBILITY: 'flexibility'\n};\n\nexport const DIFFICULTY_LEVELS = {\n  BEGINNER: 'beginner',\n  INTERMEDIATE: 'intermediate',\n  ADVANCED: 'advanced'\n};\n\n// Fallback exercises for when AI is unavailable\nconst FALLBACK_EXERCISES = {\n  neck_roll: {\n    name: 'Neck Rolls',\n    duration: 30,\n    description: 'Gently roll your neck in circles',\n    bodyParts: ['neck'],\n    goals: ['desk_break', 'stress_relief'],\n    equipment: ['none']\n  },\n  shoulder_shrug: {\n    name: 'Shoulder Shrugs',\n    duration: 30,\n    description: 'Lift shoulders up to ears and release',\n    bodyParts: ['shoulders'],\n    goals: ['desk_break', 'stress_relief'],\n    equipment: ['none']\n  },\n  arm_circles: {\n    name: 'Arm Circles',\n    duration: 40,\n    description: 'Make circles with your arms',\n    bodyParts: ['shoulders', 'arms'],\n    goals: ['morning_wake_up', 'pre_workout'],\n    equipment: ['none']\n  },\n  cat_cow: {\n    name: 'Cat-Cow Stretch',\n    duration: 45,\n    description: 'Arch and round your back',\n    bodyParts: ['upper_back', 'lower_back'],\n    goals: ['morning_wake_up', 'flexibility'],\n    equipment: ['mat']\n  },\n  forward_fold: {\n    name: 'Forward Fold',\n    duration: 45,\n    description: 'Bend forward to touch toes',\n    bodyParts: ['lower_back', 'legs'],\n    goals: ['flexibility', 'bedtime_relax'],\n    equipment: ['none']\n  },\n  chest_opener: {\n    name: 'Chest Opener',\n    duration: 30,\n    description: 'Clasp hands behind back and lift',\n    bodyParts: ['chest', 'shoulders'],\n    goals: ['desk_break', 'post_workout'],\n    equipment: ['none']\n  },\n  hip_circles: {\n    name: 'Hip Circles',\n    duration: 40,\n    description: 'Circle hips in both directions',\n    bodyParts: ['hips'],\n    goals: ['pre_workout', 'flexibility'],\n    equipment: ['none']\n  },\n  quad_stretch: {\n    name: 'Standing Quad Stretch',\n    duration: 60,\n    description: 'Hold foot behind you, 30s each leg',\n    bodyParts: ['legs'],\n    goals: ['pre_workout', 'post_workout'],\n    equipment: ['wall']\n  },\n  calf_stretch: {\n    name: 'Calf Stretch',\n    duration: 60,\n    description: 'Push against wall, 30s each leg',\n    bodyParts: ['calves'],\n    goals: ['pre_workout', 'post_workout'],\n    equipment: ['wall']\n  },\n  foam_roll_back: {\n    name: 'Foam Roll Upper Back',\n    duration: 60,\n    description: 'Roll slowly from mid to upper back',\n    bodyParts: ['upper_back'],\n    goals: ['post_workout', 'pain_relief'],\n    equipment: ['foam_roller']\n  },\n  lacrosse_shoulders: {\n    name: 'Lacrosse Ball Shoulder Release',\n    duration: 60,\n    description: 'Roll ball on tight spots, 30s each side',\n    bodyParts: ['shoulders'],\n    goals: ['pain_relief', 'post_workout'],\n    equipment: ['lacrosse_ball']\n  },\n  band_chest_stretch: {\n    name: 'Band Chest Stretch',\n    duration: 45,\n    description: 'Hold band behind back, pull apart gently',\n    bodyParts: ['chest', 'shoulders'],\n    goals: ['flexibility', 'desk_break'],\n    equipment: ['resistance_band']\n  }\n};\n\nexport class RoutineGenerator {\n  constructor() {\n    this.fallbackExercises = FALLBACK_EXERCISES;\n    this.useAI = true; // Can be toggled for API usage\n  }\n  \n  async generateRoutine(preferences) {\n    const { equipment = ['none'] } = preferences;\n    \n    // Ensure equipment is always an array\n    const equipmentArray = Array.isArray(equipment) ? equipment : [equipment];\n    \n    // Update preferences with equipment array\n    const updatedPreferences = {\n      ...preferences,\n      equipment: equipmentArray\n    };\n    \n    try {\n      if (this.useAI) {\n        // Try AI generation first\n        const aiRoutine = await generateAIRoutine(updatedPreferences);\n        \n        // Load YouTube videos for exercises\n        const exercisesWithVideos = await loadExerciseVideos(aiRoutine.exercises);\n        \n        return {\n          name: aiRoutine.routineName,\n          exercises: exercisesWithVideos,\n          totalDuration: exercisesWithVideos.reduce((sum, ex) => sum + ex.duration, 0),\n          difficulty: preferences.difficulty,\n          benefits: this.extractBenefits(exercisesWithVideos),\n          tips: aiRoutine.warmupTips || [],\n          cooldownAdvice: aiRoutine.cooldownAdvice\n        };\n      }\n    } catch (error) {\n      console.error('AI generation failed, using fallback:', error);\n    }\n    \n    // Fallback to manual generation\n    return this.generateFallbackRoutine(updatedPreferences);\n  }\n  \n  generateFallbackRoutine(preferences) {\n    const { duration, goals, bodyParts, equipment } = preferences;\n    const targetDuration = duration || 300;\n    \n    // Filter exercises based on goals, body parts, and equipment\n    let matchingExercises = Object.values(this.fallbackExercises).filter(exercise => {\n      const goalMatch = goals.some(goal => exercise.goals.includes(goal));\n      const bodyPartMatch = bodyParts.some(part => \n        exercise.bodyParts.includes(part) || bodyParts.includes('full_body')\n      );\n      const equipmentMatch = equipment.some(eq => \n        exercise.equipment.includes(eq) || exercise.equipment.includes('none')\n      );\n      return (goalMatch || bodyPartMatch) && equipmentMatch;\n    });\n    \n    // If no matches, use exercises that match equipment\n    if (matchingExercises.length === 0) {\n      matchingExercises = Object.values(this.fallbackExercises).filter(exercise =>\n        equipment.some(eq => exercise.equipment.includes(eq) || exercise.equipment.includes('none'))\n      );\n    }\n    \n    // Select exercises to fit duration\n    const selectedExercises = [];\n    let currentDuration = 0;\n    const usedExercises = new Set();\n    \n    while (currentDuration < targetDuration && matchingExercises.length > 0) {\n      const availableExercises = matchingExercises.filter(ex => !usedExercises.has(ex.name));\n      \n      if (availableExercises.length === 0) {\n        // Reset if we've used all exercises\n        usedExercises.clear();\n        continue;\n      }\n      \n      const randomIndex = Math.floor(Math.random() * availableExercises.length);\n      const exercise = availableExercises[randomIndex];\n      \n      if (currentDuration + exercise.duration <= targetDuration + 30) {\n        selectedExercises.push({\n          ...exercise,\n          videoSearchQuery: `${exercise.name} stretching exercise tutorial`\n        });\n        currentDuration += exercise.duration;\n        usedExercises.add(exercise.name);\n      } else {\n        // Try to find a shorter exercise\n        const shorterExercise = availableExercises.find(ex => \n          currentDuration + ex.duration <= targetDuration && !usedExercises.has(ex.name)\n        );\n        if (shorterExercise) {\n          selectedExercises.push({\n            ...shorterExercise,\n            videoSearchQuery: `${shorterExercise.name} stretching exercise tutorial`\n          });\n          currentDuration += shorterExercise.duration;\n          usedExercises.add(shorterExercise.name);\n        } else {\n          break;\n        }\n      }\n    }\n    \n    return {\n      name: this.generateRoutineName(goals),\n      exercises: selectedExercises,\n      totalDuration: currentDuration,\n      difficulty: preferences.difficulty || 'beginner',\n      benefits: this.extractBenefits(selectedExercises),\n      tips: this.generateTips(preferences),\n      cooldownAdvice: 'Take deep breaths and move gently back to normal activity.'\n    };\n  }\n  \n  generateRoutineName(goals) {\n    const goalNames = {\n      morning_wake_up: 'Morning Energizer',\n      pre_workout: 'Pre-Workout Prep',\n      post_workout: 'Post-Workout Recovery',\n      desk_break: 'Desk Break Relief',\n      stress_relief: 'Stress Relief Flow',\n      bedtime_relax: 'Bedtime Wind Down',\n      pain_relief: 'Pain Relief Routine',\n      flexibility: 'Flexibility Flow'\n    };\n    \n    return goalNames[goals[0]] || 'Custom Stretch Routine';\n  }\n  \n  extractBenefits(exercises) {\n    const benefitsSet = new Set();\n    exercises.forEach(ex => {\n      if (ex.benefits) {\n        ex.benefits.forEach(benefit => benefitsSet.add(benefit));\n      }\n    });\n    \n    // Add default benefits if none from AI\n    if (benefitsSet.size === 0) {\n      benefitsSet.add('Improved flexibility');\n      benefitsSet.add('Reduced muscle tension');\n      benefitsSet.add('Better posture');\n      benefitsSet.add('Increased blood flow');\n    }\n    \n    return Array.from(benefitsSet).slice(0, 5);\n  }\n  \n  generateTips(preferences) {\n    const tips = [];\n    \n    if (preferences.timeOfDay === 'morning') {\n      tips.push('Start gently - your body may be stiff from sleep');\n    }\n    \n    if (preferences.goals.includes('pre_workout')) {\n      tips.push('Focus on dynamic movements to warm up muscles');\n    }\n    \n    if (preferences.goals.includes('post_workout')) {\n      tips.push('Hold stretches longer for better recovery');\n    }\n    \n    if (preferences.difficulty === 'beginner') {\n      tips.push('Listen to your body and don\\'t push too hard');\n    }\n    \n    tips.push('Breathe deeply throughout each stretch');\n    tips.push('Move slowly and with control');\n    \n    return tips.slice(0, 5);\n  }\n}\n\n// Create singleton instance\nexport const routineGenerator = new RoutineGenerator();\n\n// Helper function to get YouTube embed URL\nexport const getYouTubeEmbedUrl = (videoId) => {\n  if (!videoId) return null;\n  return `https://www.youtube.com/embed/${videoId}?rel=0&showinfo=0&modestbranding=1`;\n};\n\n// Helper function to validate routine generation\nexport const validateRoutinePreferences = (preferences) => {\n  const errors = [];\n  \n  if (!preferences.duration || preferences.duration < 60) {\n    errors.push('Duration must be at least 1 minute');\n  }\n  \n  if (!preferences.goals || preferences.goals.length === 0) {\n    errors.push('At least one goal must be selected');\n  }\n  \n  if (!preferences.bodyParts || preferences.bodyParts.length === 0) {\n    errors.push('At least one body part must be selected');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    error: errors.join('. ')\n  };\n};"],"mappings":"AAAA;AACA,SAASA,iBAAiB,EAAEC,kBAAkB,QAAQ,gBAAgB;AAEtE,OAAO,MAAMC,UAAU,GAAG;EACxBC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAE,WAAW;EACtBC,UAAU,EAAE,YAAY;EACxBC,UAAU,EAAE,YAAY;EACxBC,KAAK,EAAE,OAAO;EACdC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,MAAM;EACZC,MAAM,EAAE,QAAQ;EAChBC,SAAS,EAAE;AACb,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG;EACnBC,eAAe,EAAE,iBAAiB;EAClCC,WAAW,EAAE,aAAa;EAC1BC,YAAY,EAAE,cAAc;EAC5BC,UAAU,EAAE,YAAY;EACxBC,aAAa,EAAE,eAAe;EAC9BC,aAAa,EAAE,eAAe;EAC9BC,WAAW,EAAE,aAAa;EAC1BC,WAAW,EAAE;AACf,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAG;EAC/BC,QAAQ,EAAE,UAAU;EACpBC,YAAY,EAAE,cAAc;EAC5BC,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA,MAAMC,kBAAkB,GAAG;EACzBC,SAAS,EAAE;IACTC,IAAI,EAAE,YAAY;IAClBC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,kCAAkC;IAC/CC,SAAS,EAAE,CAAC,MAAM,CAAC;IACnBC,KAAK,EAAE,CAAC,YAAY,EAAE,eAAe,CAAC;IACtCC,SAAS,EAAE,CAAC,MAAM;EACpB,CAAC;EACDC,cAAc,EAAE;IACdN,IAAI,EAAE,iBAAiB;IACvBC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,uCAAuC;IACpDC,SAAS,EAAE,CAAC,WAAW,CAAC;IACxBC,KAAK,EAAE,CAAC,YAAY,EAAE,eAAe,CAAC;IACtCC,SAAS,EAAE,CAAC,MAAM;EACpB,CAAC;EACDE,WAAW,EAAE;IACXP,IAAI,EAAE,aAAa;IACnBC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,6BAA6B;IAC1CC,SAAS,EAAE,CAAC,WAAW,EAAE,MAAM,CAAC;IAChCC,KAAK,EAAE,CAAC,iBAAiB,EAAE,aAAa,CAAC;IACzCC,SAAS,EAAE,CAAC,MAAM;EACpB,CAAC;EACDG,OAAO,EAAE;IACPR,IAAI,EAAE,iBAAiB;IACvBC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,0BAA0B;IACvCC,SAAS,EAAE,CAAC,YAAY,EAAE,YAAY,CAAC;IACvCC,KAAK,EAAE,CAAC,iBAAiB,EAAE,aAAa,CAAC;IACzCC,SAAS,EAAE,CAAC,KAAK;EACnB,CAAC;EACDI,YAAY,EAAE;IACZT,IAAI,EAAE,cAAc;IACpBC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,4BAA4B;IACzCC,SAAS,EAAE,CAAC,YAAY,EAAE,MAAM,CAAC;IACjCC,KAAK,EAAE,CAAC,aAAa,EAAE,eAAe,CAAC;IACvCC,SAAS,EAAE,CAAC,MAAM;EACpB,CAAC;EACDK,YAAY,EAAE;IACZV,IAAI,EAAE,cAAc;IACpBC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,kCAAkC;IAC/CC,SAAS,EAAE,CAAC,OAAO,EAAE,WAAW,CAAC;IACjCC,KAAK,EAAE,CAAC,YAAY,EAAE,cAAc,CAAC;IACrCC,SAAS,EAAE,CAAC,MAAM;EACpB,CAAC;EACDM,WAAW,EAAE;IACXX,IAAI,EAAE,aAAa;IACnBC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,gCAAgC;IAC7CC,SAAS,EAAE,CAAC,MAAM,CAAC;IACnBC,KAAK,EAAE,CAAC,aAAa,EAAE,aAAa,CAAC;IACrCC,SAAS,EAAE,CAAC,MAAM;EACpB,CAAC;EACDO,YAAY,EAAE;IACZZ,IAAI,EAAE,uBAAuB;IAC7BC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,oCAAoC;IACjDC,SAAS,EAAE,CAAC,MAAM,CAAC;IACnBC,KAAK,EAAE,CAAC,aAAa,EAAE,cAAc,CAAC;IACtCC,SAAS,EAAE,CAAC,MAAM;EACpB,CAAC;EACDQ,YAAY,EAAE;IACZb,IAAI,EAAE,cAAc;IACpBC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,iCAAiC;IAC9CC,SAAS,EAAE,CAAC,QAAQ,CAAC;IACrBC,KAAK,EAAE,CAAC,aAAa,EAAE,cAAc,CAAC;IACtCC,SAAS,EAAE,CAAC,MAAM;EACpB,CAAC;EACDS,cAAc,EAAE;IACdd,IAAI,EAAE,sBAAsB;IAC5BC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,oCAAoC;IACjDC,SAAS,EAAE,CAAC,YAAY,CAAC;IACzBC,KAAK,EAAE,CAAC,cAAc,EAAE,aAAa,CAAC;IACtCC,SAAS,EAAE,CAAC,aAAa;EAC3B,CAAC;EACDU,kBAAkB,EAAE;IAClBf,IAAI,EAAE,gCAAgC;IACtCC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,yCAAyC;IACtDC,SAAS,EAAE,CAAC,WAAW,CAAC;IACxBC,KAAK,EAAE,CAAC,aAAa,EAAE,cAAc,CAAC;IACtCC,SAAS,EAAE,CAAC,eAAe;EAC7B,CAAC;EACDW,kBAAkB,EAAE;IAClBhB,IAAI,EAAE,oBAAoB;IAC1BC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,0CAA0C;IACvDC,SAAS,EAAE,CAAC,OAAO,EAAE,WAAW,CAAC;IACjCC,KAAK,EAAE,CAAC,aAAa,EAAE,YAAY,CAAC;IACpCC,SAAS,EAAE,CAAC,iBAAiB;EAC/B;AACF,CAAC;AAED,OAAO,MAAMY,gBAAgB,CAAC;EAC5BC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,iBAAiB,GAAGrB,kBAAkB;IAC3C,IAAI,CAACsB,KAAK,GAAG,IAAI,CAAC,CAAC;EACrB;EAEA,MAAMC,eAAeA,CAACC,WAAW,EAAE;IACjC,MAAM;MAAEjB,SAAS,GAAG,CAAC,MAAM;IAAE,CAAC,GAAGiB,WAAW;;IAE5C;IACA,MAAMC,cAAc,GAAGC,KAAK,CAACC,OAAO,CAACpB,SAAS,CAAC,GAAGA,SAAS,GAAG,CAACA,SAAS,CAAC;;IAEzE;IACA,MAAMqB,kBAAkB,GAAG;MACzB,GAAGJ,WAAW;MACdjB,SAAS,EAAEkB;IACb,CAAC;IAED,IAAI;MACF,IAAI,IAAI,CAACH,KAAK,EAAE;QACd;QACA,MAAMO,SAAS,GAAG,MAAMvD,iBAAiB,CAACsD,kBAAkB,CAAC;;QAE7D;QACA,MAAME,mBAAmB,GAAG,MAAMvD,kBAAkB,CAACsD,SAAS,CAACE,SAAS,CAAC;QAEzE,OAAO;UACL7B,IAAI,EAAE2B,SAAS,CAACG,WAAW;UAC3BD,SAAS,EAAED,mBAAmB;UAC9BG,aAAa,EAAEH,mBAAmB,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,EAAE,KAAKD,GAAG,GAAGC,EAAE,CAACjC,QAAQ,EAAE,CAAC,CAAC;UAC5EkC,UAAU,EAAEb,WAAW,CAACa,UAAU;UAClCC,QAAQ,EAAE,IAAI,CAACC,eAAe,CAACT,mBAAmB,CAAC;UACnDU,IAAI,EAAEX,SAAS,CAACY,UAAU,IAAI,EAAE;UAChCC,cAAc,EAAEb,SAAS,CAACa;QAC5B,CAAC;MACH;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC/D;;IAEA;IACA,OAAO,IAAI,CAACE,uBAAuB,CAACjB,kBAAkB,CAAC;EACzD;EAEAiB,uBAAuBA,CAACrB,WAAW,EAAE;IACnC,MAAM;MAAErB,QAAQ;MAAEG,KAAK;MAAED,SAAS;MAAEE;IAAU,CAAC,GAAGiB,WAAW;IAC7D,MAAMsB,cAAc,GAAG3C,QAAQ,IAAI,GAAG;;IAEtC;IACA,IAAI4C,iBAAiB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC5B,iBAAiB,CAAC,CAAC6B,MAAM,CAACC,QAAQ,IAAI;MAC/E,MAAMC,SAAS,GAAG9C,KAAK,CAAC+C,IAAI,CAACC,IAAI,IAAIH,QAAQ,CAAC7C,KAAK,CAACiD,QAAQ,CAACD,IAAI,CAAC,CAAC;MACnE,MAAME,aAAa,GAAGnD,SAAS,CAACgD,IAAI,CAACI,IAAI,IACvCN,QAAQ,CAAC9C,SAAS,CAACkD,QAAQ,CAACE,IAAI,CAAC,IAAIpD,SAAS,CAACkD,QAAQ,CAAC,WAAW,CACrE,CAAC;MACD,MAAMG,cAAc,GAAGnD,SAAS,CAAC8C,IAAI,CAACM,EAAE,IACtCR,QAAQ,CAAC5C,SAAS,CAACgD,QAAQ,CAACI,EAAE,CAAC,IAAIR,QAAQ,CAAC5C,SAAS,CAACgD,QAAQ,CAAC,MAAM,CACvE,CAAC;MACD,OAAO,CAACH,SAAS,IAAII,aAAa,KAAKE,cAAc;IACvD,CAAC,CAAC;;IAEF;IACA,IAAIX,iBAAiB,CAACa,MAAM,KAAK,CAAC,EAAE;MAClCb,iBAAiB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC5B,iBAAiB,CAAC,CAAC6B,MAAM,CAACC,QAAQ,IACvE5C,SAAS,CAAC8C,IAAI,CAACM,EAAE,IAAIR,QAAQ,CAAC5C,SAAS,CAACgD,QAAQ,CAACI,EAAE,CAAC,IAAIR,QAAQ,CAAC5C,SAAS,CAACgD,QAAQ,CAAC,MAAM,CAAC,CAC7F,CAAC;IACH;;IAEA;IACA,MAAMM,iBAAiB,GAAG,EAAE;IAC5B,IAAIC,eAAe,GAAG,CAAC;IACvB,MAAMC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;IAE/B,OAAOF,eAAe,GAAGhB,cAAc,IAAIC,iBAAiB,CAACa,MAAM,GAAG,CAAC,EAAE;MACvE,MAAMK,kBAAkB,GAAGlB,iBAAiB,CAACG,MAAM,CAACd,EAAE,IAAI,CAAC2B,aAAa,CAACG,GAAG,CAAC9B,EAAE,CAAClC,IAAI,CAAC,CAAC;MAEtF,IAAI+D,kBAAkB,CAACL,MAAM,KAAK,CAAC,EAAE;QACnC;QACAG,aAAa,CAACI,KAAK,CAAC,CAAC;QACrB;MACF;MAEA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,kBAAkB,CAACL,MAAM,CAAC;MACzE,MAAMT,QAAQ,GAAGc,kBAAkB,CAACG,WAAW,CAAC;MAEhD,IAAIN,eAAe,GAAGX,QAAQ,CAAChD,QAAQ,IAAI2C,cAAc,GAAG,EAAE,EAAE;QAC9De,iBAAiB,CAACW,IAAI,CAAC;UACrB,GAAGrB,QAAQ;UACXsB,gBAAgB,EAAE,GAAGtB,QAAQ,CAACjD,IAAI;QACpC,CAAC,CAAC;QACF4D,eAAe,IAAIX,QAAQ,CAAChD,QAAQ;QACpC4D,aAAa,CAACW,GAAG,CAACvB,QAAQ,CAACjD,IAAI,CAAC;MAClC,CAAC,MAAM;QACL;QACA,MAAMyE,eAAe,GAAGV,kBAAkB,CAACW,IAAI,CAACxC,EAAE,IAChD0B,eAAe,GAAG1B,EAAE,CAACjC,QAAQ,IAAI2C,cAAc,IAAI,CAACiB,aAAa,CAACG,GAAG,CAAC9B,EAAE,CAAClC,IAAI,CAC/E,CAAC;QACD,IAAIyE,eAAe,EAAE;UACnBd,iBAAiB,CAACW,IAAI,CAAC;YACrB,GAAGG,eAAe;YAClBF,gBAAgB,EAAE,GAAGE,eAAe,CAACzE,IAAI;UAC3C,CAAC,CAAC;UACF4D,eAAe,IAAIa,eAAe,CAACxE,QAAQ;UAC3C4D,aAAa,CAACW,GAAG,CAACC,eAAe,CAACzE,IAAI,CAAC;QACzC,CAAC,MAAM;UACL;QACF;MACF;IACF;IAEA,OAAO;MACLA,IAAI,EAAE,IAAI,CAAC2E,mBAAmB,CAACvE,KAAK,CAAC;MACrCyB,SAAS,EAAE8B,iBAAiB;MAC5B5B,aAAa,EAAE6B,eAAe;MAC9BzB,UAAU,EAAEb,WAAW,CAACa,UAAU,IAAI,UAAU;MAChDC,QAAQ,EAAE,IAAI,CAACC,eAAe,CAACsB,iBAAiB,CAAC;MACjDrB,IAAI,EAAE,IAAI,CAACsC,YAAY,CAACtD,WAAW,CAAC;MACpCkB,cAAc,EAAE;IAClB,CAAC;EACH;EAEAmC,mBAAmBA,CAACvE,KAAK,EAAE;IACzB,MAAMyE,SAAS,GAAG;MAChBC,eAAe,EAAE,mBAAmB;MACpCC,WAAW,EAAE,kBAAkB;MAC/BC,YAAY,EAAE,uBAAuB;MACrCC,UAAU,EAAE,mBAAmB;MAC/BC,aAAa,EAAE,oBAAoB;MACnCC,aAAa,EAAE,mBAAmB;MAClCC,WAAW,EAAE,qBAAqB;MAClCC,WAAW,EAAE;IACf,CAAC;IAED,OAAOR,SAAS,CAACzE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,wBAAwB;EACxD;EAEAiC,eAAeA,CAACR,SAAS,EAAE;IACzB,MAAMyD,WAAW,GAAG,IAAIxB,GAAG,CAAC,CAAC;IAC7BjC,SAAS,CAAC0D,OAAO,CAACrD,EAAE,IAAI;MACtB,IAAIA,EAAE,CAACE,QAAQ,EAAE;QACfF,EAAE,CAACE,QAAQ,CAACmD,OAAO,CAACC,OAAO,IAAIF,WAAW,CAACd,GAAG,CAACgB,OAAO,CAAC,CAAC;MAC1D;IACF,CAAC,CAAC;;IAEF;IACA,IAAIF,WAAW,CAACG,IAAI,KAAK,CAAC,EAAE;MAC1BH,WAAW,CAACd,GAAG,CAAC,sBAAsB,CAAC;MACvCc,WAAW,CAACd,GAAG,CAAC,wBAAwB,CAAC;MACzCc,WAAW,CAACd,GAAG,CAAC,gBAAgB,CAAC;MACjCc,WAAW,CAACd,GAAG,CAAC,sBAAsB,CAAC;IACzC;IAEA,OAAOhD,KAAK,CAACkE,IAAI,CAACJ,WAAW,CAAC,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC5C;EAEAf,YAAYA,CAACtD,WAAW,EAAE;IACxB,MAAMgB,IAAI,GAAG,EAAE;IAEf,IAAIhB,WAAW,CAACsE,SAAS,KAAK,SAAS,EAAE;MACvCtD,IAAI,CAACgC,IAAI,CAAC,kDAAkD,CAAC;IAC/D;IAEA,IAAIhD,WAAW,CAAClB,KAAK,CAACiD,QAAQ,CAAC,aAAa,CAAC,EAAE;MAC7Cf,IAAI,CAACgC,IAAI,CAAC,+CAA+C,CAAC;IAC5D;IAEA,IAAIhD,WAAW,CAAClB,KAAK,CAACiD,QAAQ,CAAC,cAAc,CAAC,EAAE;MAC9Cf,IAAI,CAACgC,IAAI,CAAC,2CAA2C,CAAC;IACxD;IAEA,IAAIhD,WAAW,CAACa,UAAU,KAAK,UAAU,EAAE;MACzCG,IAAI,CAACgC,IAAI,CAAC,8CAA8C,CAAC;IAC3D;IAEAhC,IAAI,CAACgC,IAAI,CAAC,wCAAwC,CAAC;IACnDhC,IAAI,CAACgC,IAAI,CAAC,8BAA8B,CAAC;IAEzC,OAAOhC,IAAI,CAACqD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACzB;AACF;;AAEA;AACA,OAAO,MAAME,gBAAgB,GAAG,IAAI5E,gBAAgB,CAAC,CAAC;;AAEtD;AACA,OAAO,MAAM6E,kBAAkB,GAAIC,OAAO,IAAK;EAC7C,IAAI,CAACA,OAAO,EAAE,OAAO,IAAI;EACzB,OAAO,iCAAiCA,OAAO,oCAAoC;AACrF,CAAC;;AAED;AACA,OAAO,MAAMC,0BAA0B,GAAI1E,WAAW,IAAK;EACzD,MAAM2E,MAAM,GAAG,EAAE;EAEjB,IAAI,CAAC3E,WAAW,CAACrB,QAAQ,IAAIqB,WAAW,CAACrB,QAAQ,GAAG,EAAE,EAAE;IACtDgG,MAAM,CAAC3B,IAAI,CAAC,oCAAoC,CAAC;EACnD;EAEA,IAAI,CAAChD,WAAW,CAAClB,KAAK,IAAIkB,WAAW,CAAClB,KAAK,CAACsD,MAAM,KAAK,CAAC,EAAE;IACxDuC,MAAM,CAAC3B,IAAI,CAAC,oCAAoC,CAAC;EACnD;EAEA,IAAI,CAAChD,WAAW,CAACnB,SAAS,IAAImB,WAAW,CAACnB,SAAS,CAACuD,MAAM,KAAK,CAAC,EAAE;IAChEuC,MAAM,CAAC3B,IAAI,CAAC,yCAAyC,CAAC;EACxD;EAEA,OAAO;IACL4B,OAAO,EAAED,MAAM,CAACvC,MAAM,KAAK,CAAC;IAC5BjB,KAAK,EAAEwD,MAAM,CAACE,IAAI,CAAC,IAAI;EACzB,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}