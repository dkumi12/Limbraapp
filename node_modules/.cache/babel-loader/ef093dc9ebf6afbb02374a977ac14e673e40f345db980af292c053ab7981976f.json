{"ast":null,"code":"// OpenRouter API configuration and service\nconst getOpenRouterAPIKey = () => {\n  return localStorage.getItem('openrouter_api_key') || '';\n};\nconst getYouTubeAPIKey = () => {\n  return localStorage.getItem('youtube_api_key') || '';\n};\nconst OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/chat/completions';\n\n// YouTube API configuration\nconst YOUTUBE_API_URL = 'https://www.googleapis.com/youtube/v3/search';\n\n// Equipment types\nexport const EQUIPMENT_TYPES = {\n  NONE: 'none',\n  LACROSSE_BALL: 'lacrosse_ball',\n  TENNIS_BALL: 'tennis_ball',\n  FOAM_ROLLER: 'foam_roller',\n  RESISTANCE_BAND: 'resistance_band',\n  YOGA_BLOCK: 'yoga_block',\n  YOGA_STRAP: 'yoga_strap',\n  STICK: 'stick',\n  KETTLEBELL: 'kettlebell',\n  DUMBBELL: 'dumbbell',\n  STABILITY_BALL: 'stability_ball',\n  PULL_UP_BAR: 'pull_up_bar',\n  WALL: 'wall',\n  CHAIR: 'chair',\n  MAT: 'mat'\n};\n\n// Generate routine using AI\nexport async function generateAIRoutine(preferences) {\n  const {\n    duration,\n    goals,\n    bodyParts,\n    equipment,\n    difficulty,\n    energyLevel,\n    problems\n  } = preferences;\n  const prompt = `\nGenerate a personalized stretching and warm-up routine with the following requirements:\n\nDuration: ${duration} seconds (${Math.round(duration / 60)} minutes)\nGoals: ${goals.join(', ')}\nBody Parts: ${bodyParts.join(', ')}\nEquipment Available: ${equipment.join(', ')}\nDifficulty Level: ${difficulty}\nEnergy Level: ${energyLevel}\nSpecific Problems: ${problems.join(', ')}\n\nPlease provide a JSON response with exactly this structure:\n{\n  \"routineName\": \"Name of the routine\",\n  \"exercises\": [\n    {\n      \"name\": \"Exercise name\",\n      \"duration\": 30,\n      \"description\": \"Clear, concise instructions\",\n      \"equipment\": [\"equipment needed\"],\n      \"targetMuscles\": [\"muscles targeted\"],\n      \"benefits\": [\"key benefits\"],\n      \"tips\": \"Important form or safety tip\",\n      \"videoSearchQuery\": \"search query for YouTube\"\n    }\n  ],\n  \"warmupTips\": [\"3-5 general tips\"],\n  \"cooldownAdvice\": \"Brief cooldown advice\"\n}\n\nRequirements:\n- Each exercise should be 20-60 seconds\n- Include variety of movements\n- Progress from gentle to more intensive\n- Include equipment-specific exercises when equipment is available\n- Ensure total duration matches requested time\n- Make exercises appropriate for the difficulty level\n`;\n  try {\n    const apiKey = getOpenRouterAPIKey();\n    if (!apiKey) {\n      throw new Error('OpenRouter API key not configured');\n    }\n    const response = await fetch(OPENROUTER_API_URL, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n        'HTTP-Referer': window.location.origin,\n        'X-Title': 'Stretch Easy App'\n      },\n      body: JSON.stringify({\n        model: 'anthropic/claude-3-haiku',\n        messages: [{\n          role: 'system',\n          content: 'You are a professional fitness and stretching expert. Generate safe, effective routines.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        temperature: 0.7,\n        max_tokens: 2000\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`API error: ${response.status}`);\n    }\n    const data = await response.json();\n    const routineData = JSON.parse(data.choices[0].message.content);\n    return routineData;\n  } catch (error) {\n    console.error('Error generating AI routine:', error);\n    throw error;\n  }\n}\n// Search YouTube for exercise videos\nexport async function searchYouTubeVideos(query, maxResults = 5) {\n  const apiKey = getYouTubeAPIKey();\n  if (!apiKey) {\n    console.warn('YouTube API key not configured');\n    return [];\n  }\n  const params = new URLSearchParams({\n    part: 'snippet',\n    q: query,\n    type: 'video',\n    maxResults: maxResults,\n    videoEmbeddable: true,\n    videoDuration: 'short',\n    // Under 4 minutes\n    relevanceLanguage: 'en',\n    safeSearch: 'strict',\n    key: apiKey\n  });\n  try {\n    const response = await fetch(`${YOUTUBE_API_URL}?${params}`);\n    if (!response.ok) {\n      throw new Error(`YouTube API error: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.items || [];\n  } catch (error) {\n    console.error('Error searching YouTube:', error);\n    return [];\n  }\n}\n\n// Load videos for exercises\nexport async function loadExerciseVideos(exercises) {\n  const exercisesWithVideos = [];\n  for (const exercise of exercises) {\n    try {\n      if (exercise.videoSearchQuery) {\n        const videos = await searchYouTubeVideos(exercise.videoSearchQuery, 3);\n        if (videos.length > 0) {\n          // Find the best video based on title relevance\n          const bestVideo = videos.find(video => {\n            const title = video.snippet.title.toLowerCase();\n            return (title.includes('stretch') || title.includes('exercise') || title.includes('how to') || title.includes('form')) && !title.includes('compilation');\n          }) || videos[0];\n          exercise.videoId = bestVideo.id.videoId;\n          exercise.videoTitle = bestVideo.snippet.title;\n          exercise.channelTitle = bestVideo.snippet.channelTitle;\n        }\n      }\n      exercisesWithVideos.push(exercise);\n    } catch (error) {\n      console.error(`Error loading video for ${exercise.name}:`, error);\n      exercisesWithVideos.push(exercise);\n    }\n  }\n  return exercisesWithVideos;\n}\n// Equipment descriptions\nexport const EQUIPMENT_INFO = {\n  [EQUIPMENT_TYPES.NONE]: {\n    name: 'No Equipment',\n    description: 'Bodyweight only',\n    icon: '🤸'\n  },\n  [EQUIPMENT_TYPES.LACROSSE_BALL]: {\n    name: 'Lacrosse Ball',\n    description: 'For deep tissue massage',\n    icon: '/tennis-ball.svg'\n  },\n  [EQUIPMENT_TYPES.TENNIS_BALL]: {\n    name: 'Tennis Ball',\n    description: 'For trigger point release',\n    icon: '🎾'\n  },\n  [EQUIPMENT_TYPES.FOAM_ROLLER]: {\n    name: 'Foam Roller',\n    description: 'For myofascial release',\n    icon: '🟩'\n  },\n  [EQUIPMENT_TYPES.RESISTANCE_BAND]: {\n    name: 'Resistance Band',\n    description: 'For assisted stretching',\n    icon: '🎗️'\n  },\n  [EQUIPMENT_TYPES.YOGA_BLOCK]: {\n    name: 'Yoga Block',\n    description: 'For support and alignment',\n    icon: '🧱'\n  },\n  [EQUIPMENT_TYPES.YOGA_STRAP]: {\n    name: 'Yoga Strap',\n    description: 'For deeper stretches',\n    icon: '🪢'\n  },\n  [EQUIPMENT_TYPES.STICK]: {\n    name: 'Mobility Stick',\n    description: 'For posture and mobility',\n    icon: '/mobility-stick.svg'\n  },\n  [EQUIPMENT_TYPES.KETTLEBELL]: {\n    name: 'Kettlebell',\n    description: 'For weighted stretches',\n    icon: '🔔'\n  },\n  [EQUIPMENT_TYPES.DUMBBELL]: {\n    name: 'Dumbbell',\n    description: 'For weighted mobility',\n    icon: '💪'\n  },\n  [EQUIPMENT_TYPES.STABILITY_BALL]: {\n    name: 'Stability Ball',\n    description: 'For balance and core',\n    icon: '⚪'\n  },\n  [EQUIPMENT_TYPES.PULL_UP_BAR]: {\n    name: 'Pull-up Bar',\n    description: 'For hanging stretches',\n    icon: '🚪'\n  },\n  [EQUIPMENT_TYPES.WALL]: {\n    name: 'Wall',\n    description: 'For support',\n    icon: '🏢'\n  },\n  [EQUIPMENT_TYPES.CHAIR]: {\n    name: 'Chair',\n    description: 'For seated stretches',\n    icon: '🪑'\n  },\n  [EQUIPMENT_TYPES.MAT]: {\n    name: 'Exercise Mat',\n    description: 'For floor work',\n    icon: '🏋️'\n  }\n};","map":{"version":3,"names":["getOpenRouterAPIKey","localStorage","getItem","getYouTubeAPIKey","OPENROUTER_API_URL","YOUTUBE_API_URL","EQUIPMENT_TYPES","NONE","LACROSSE_BALL","TENNIS_BALL","FOAM_ROLLER","RESISTANCE_BAND","YOGA_BLOCK","YOGA_STRAP","STICK","KETTLEBELL","DUMBBELL","STABILITY_BALL","PULL_UP_BAR","WALL","CHAIR","MAT","generateAIRoutine","preferences","duration","goals","bodyParts","equipment","difficulty","energyLevel","problems","prompt","Math","round","join","apiKey","Error","response","fetch","method","headers","window","location","origin","body","JSON","stringify","model","messages","role","content","temperature","max_tokens","ok","status","data","json","routineData","parse","choices","message","error","console","searchYouTubeVideos","query","maxResults","warn","params","URLSearchParams","part","q","type","videoEmbeddable","videoDuration","relevanceLanguage","safeSearch","key","items","loadExerciseVideos","exercises","exercisesWithVideos","exercise","videoSearchQuery","videos","length","bestVideo","find","video","title","snippet","toLowerCase","includes","videoId","id","videoTitle","channelTitle","push","name","EQUIPMENT_INFO","description","icon"],"sources":["C:/Users/abami/OneDrive/Desktop/Projects/stretch app/src/services/api.js"],"sourcesContent":["// OpenRouter API configuration and service\nconst getOpenRouterAPIKey = () => {\n  return localStorage.getItem('openrouter_api_key') || '';\n}\n\nconst getYouTubeAPIKey = () => {\n  return localStorage.getItem('youtube_api_key') || '';\n}\n\nconst OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/chat/completions';\n\n// YouTube API configuration\nconst YOUTUBE_API_URL = 'https://www.googleapis.com/youtube/v3/search';\n\n// Equipment types\nexport const EQUIPMENT_TYPES = {\n  NONE: 'none',\n  LACROSSE_BALL: 'lacrosse_ball',\n  TENNIS_BALL: 'tennis_ball',\n  FOAM_ROLLER: 'foam_roller',\n  RESISTANCE_BAND: 'resistance_band',\n  YOGA_BLOCK: 'yoga_block',\n  YOGA_STRAP: 'yoga_strap',\n  STICK: 'stick',\n  KETTLEBELL: 'kettlebell',\n  DUMBBELL: 'dumbbell',\n  STABILITY_BALL: 'stability_ball',\n  PULL_UP_BAR: 'pull_up_bar',\n  WALL: 'wall',\n  CHAIR: 'chair',\n  MAT: 'mat'\n};\n\n// Generate routine using AI\nexport async function generateAIRoutine(preferences) {\n  const { duration, goals, bodyParts, equipment, difficulty, energyLevel, problems } = preferences;  \n  const prompt = `\nGenerate a personalized stretching and warm-up routine with the following requirements:\n\nDuration: ${duration} seconds (${Math.round(duration / 60)} minutes)\nGoals: ${goals.join(', ')}\nBody Parts: ${bodyParts.join(', ')}\nEquipment Available: ${equipment.join(', ')}\nDifficulty Level: ${difficulty}\nEnergy Level: ${energyLevel}\nSpecific Problems: ${problems.join(', ')}\n\nPlease provide a JSON response with exactly this structure:\n{\n  \"routineName\": \"Name of the routine\",\n  \"exercises\": [\n    {\n      \"name\": \"Exercise name\",\n      \"duration\": 30,\n      \"description\": \"Clear, concise instructions\",\n      \"equipment\": [\"equipment needed\"],\n      \"targetMuscles\": [\"muscles targeted\"],\n      \"benefits\": [\"key benefits\"],\n      \"tips\": \"Important form or safety tip\",\n      \"videoSearchQuery\": \"search query for YouTube\"\n    }\n  ],\n  \"warmupTips\": [\"3-5 general tips\"],\n  \"cooldownAdvice\": \"Brief cooldown advice\"\n}\n\nRequirements:\n- Each exercise should be 20-60 seconds\n- Include variety of movements\n- Progress from gentle to more intensive\n- Include equipment-specific exercises when equipment is available\n- Ensure total duration matches requested time\n- Make exercises appropriate for the difficulty level\n`;\n\n  try {\n    const apiKey = getOpenRouterAPIKey();\n    if (!apiKey) {\n      throw new Error('OpenRouter API key not configured');\n    }\n    \n    const response = await fetch(OPENROUTER_API_URL, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n        'HTTP-Referer': window.location.origin,\n        'X-Title': 'Stretch Easy App'\n      },\n      body: JSON.stringify({\n        model: 'anthropic/claude-3-haiku',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a professional fitness and stretching expert. Generate safe, effective routines.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.7,\n        max_tokens: 2000\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    const routineData = JSON.parse(data.choices[0].message.content);\n    \n    return routineData;\n  } catch (error) {\n    console.error('Error generating AI routine:', error);\n    throw error;\n  }\n}\n// Search YouTube for exercise videos\nexport async function searchYouTubeVideos(query, maxResults = 5) {\n  const apiKey = getYouTubeAPIKey();\n  if (!apiKey) {\n    console.warn('YouTube API key not configured');\n    return [];\n  }\n  \n  const params = new URLSearchParams({\n    part: 'snippet',\n    q: query,\n    type: 'video',\n    maxResults: maxResults,\n    videoEmbeddable: true,\n    videoDuration: 'short', // Under 4 minutes\n    relevanceLanguage: 'en',\n    safeSearch: 'strict',\n    key: apiKey\n  });\n\n  try {\n    const response = await fetch(`${YOUTUBE_API_URL}?${params}`);\n    \n    if (!response.ok) {\n      throw new Error(`YouTube API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.items || [];\n  } catch (error) {\n    console.error('Error searching YouTube:', error);\n    return [];\n  }\n}\n\n// Load videos for exercises\nexport async function loadExerciseVideos(exercises) {\n  const exercisesWithVideos = [];\n  \n  for (const exercise of exercises) {\n    try {\n      if (exercise.videoSearchQuery) {\n        const videos = await searchYouTubeVideos(exercise.videoSearchQuery, 3);\n        \n        if (videos.length > 0) {\n          // Find the best video based on title relevance\n          const bestVideo = videos.find(video => {\n            const title = video.snippet.title.toLowerCase();\n            return (\n              title.includes('stretch') || \n              title.includes('exercise') || \n              title.includes('how to') ||\n              title.includes('form')\n            ) && !title.includes('compilation');\n          }) || videos[0];\n          \n          exercise.videoId = bestVideo.id.videoId;\n          exercise.videoTitle = bestVideo.snippet.title;\n          exercise.channelTitle = bestVideo.snippet.channelTitle;\n        }\n      }\n      exercisesWithVideos.push(exercise);\n    } catch (error) {\n      console.error(`Error loading video for ${exercise.name}:`, error);\n      exercisesWithVideos.push(exercise);\n    }\n  }\n  \n  return exercisesWithVideos;\n}\n// Equipment descriptions\nexport const EQUIPMENT_INFO = {\n  [EQUIPMENT_TYPES.NONE]: {\n    name: 'No Equipment',\n    description: 'Bodyweight only',\n    icon: '🤸'\n  },\n  [EQUIPMENT_TYPES.LACROSSE_BALL]: {\n    name: 'Lacrosse Ball',\n    description: 'For deep tissue massage',\n    icon: '/tennis-ball.svg'\n  },\n  [EQUIPMENT_TYPES.TENNIS_BALL]: {\n    name: 'Tennis Ball',\n    description: 'For trigger point release',\n    icon: '🎾'\n  },\n  [EQUIPMENT_TYPES.FOAM_ROLLER]: {\n    name: 'Foam Roller',\n    description: 'For myofascial release',\n    icon: '🟩'\n  },\n  [EQUIPMENT_TYPES.RESISTANCE_BAND]: {\n    name: 'Resistance Band',\n    description: 'For assisted stretching',\n    icon: '🎗️'\n  },\n  [EQUIPMENT_TYPES.YOGA_BLOCK]: {\n    name: 'Yoga Block',\n    description: 'For support and alignment',\n    icon: '🧱'\n  },\n  [EQUIPMENT_TYPES.YOGA_STRAP]: {\n    name: 'Yoga Strap',\n    description: 'For deeper stretches',\n    icon: '🪢'\n  },\n  [EQUIPMENT_TYPES.STICK]: {\n    name: 'Mobility Stick',\n    description: 'For posture and mobility',\n    icon: '/mobility-stick.svg'\n  },\n  [EQUIPMENT_TYPES.KETTLEBELL]: {\n    name: 'Kettlebell',\n    description: 'For weighted stretches',\n    icon: '🔔'\n  },\n  [EQUIPMENT_TYPES.DUMBBELL]: {\n    name: 'Dumbbell',\n    description: 'For weighted mobility',\n    icon: '💪'\n  },\n  [EQUIPMENT_TYPES.STABILITY_BALL]: {\n    name: 'Stability Ball',\n    description: 'For balance and core',\n    icon: '⚪'\n  },\n  [EQUIPMENT_TYPES.PULL_UP_BAR]: {\n    name: 'Pull-up Bar',\n    description: 'For hanging stretches',\n    icon: '🚪'\n  },\n  [EQUIPMENT_TYPES.WALL]: {\n    name: 'Wall',\n    description: 'For support',\n    icon: '🏢'\n  },\n  [EQUIPMENT_TYPES.CHAIR]: {\n    name: 'Chair',\n    description: 'For seated stretches',\n    icon: '🪑'\n  },\n  [EQUIPMENT_TYPES.MAT]: {\n    name: 'Exercise Mat',\n    description: 'For floor work',\n    icon: '🏋️'\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}